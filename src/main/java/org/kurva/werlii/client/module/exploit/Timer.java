package org.kurva.werlii.client.module.exploit;

import net.minecraft.client.MinecraftClient;
import org.kurva.werlii.client.module.Module;
import org.kurva.werlii.client.setting.BooleanSetting;
import org.kurva.werlii.client.setting.NumberSetting;
import org.kurva.werlii.mixin.MinecraftClientAccessor;
import org.lwjgl.glfw.GLFW;

public class Timer extends Module {
    private final NumberSetting speedS;
    private final BooleanSetting onMoveS;
    private final BooleanSetting onGroundS;
    private final BooleanSetting adaptiveS;
    private final NumberSetting minSpeedS;
    private final NumberSetting maxSpeedS;
    
    private float originalTimerSpeed = 1.0f;
    private long lastTime;
    
    public Timer() {
        super("Timer", "Modifies game tick speed", Category.EXPLOIT);
        this.setKeyCode(GLFW.GLFW_KEY_UNKNOWN);
        this.registerKeybinding("Werlii Exploit");
        
        speedS = new NumberSetting("Speed", "Timer speed multiplier", this, 1.5, 0.1, 10.0, 0.1);
        onMoveS = new BooleanSetting("On Move", "Only active while moving", this, false);
        onGroundS = new BooleanSetting("On Ground", "Only active while on ground", this, false);
        adaptiveS = new BooleanSetting("Adaptive", "Adapt speed based on movement", this, false);
        minSpeedS = new NumberSetting("Min Speed", "Minimum adaptive speed", this, 1.0, 0.1, 5.0, 0.1);
        maxSpeedS = new NumberSetting("Max Speed", "Maximum adaptive speed", this, 2.0, 0.1, 10.0, 0.1);
        
        addSetting(speedS);
        addSetting(onMoveS);
        addSetting(onGroundS);
        addSetting(adaptiveS);
        addSetting(minSpeedS);
        addSetting(maxSpeedS);
        
        lastTime = System.currentTimeMillis();
    }
    
    @Override
    public void onTick() {
        if (mc.player == null) return;
        
        if (onMoveS.getValue() && !isMoving()) {
            resetTimer();
            return;
        }
        
        if (onGroundS.getValue() && !mc.player.isOnGround()) {
            resetTimer();
            return;
        }
        
        float speed;
        if (adaptiveS.getValue()) {
            double playerSpeed = Math.sqrt(
                mc.player.getVelocity().x * mc.player.getVelocity().x +
                mc.player.getVelocity().z * mc.player.getVelocity().z
            );
            
            speed = (float) (minSpeedS.getValue() + 
                (maxSpeedS.getValue() - minSpeedS.getValue()) * 
                Math.min(playerSpeed / 0.2871, 1.0));
        } else {
            speed = speedS.getValue().floatValue();
        }
        
        if (mc instanceof MinecraftClientAccessor) {
            MinecraftClientAccessor accessor = (MinecraftClientAccessor) mc;
            long currentTime = System.currentTimeMillis();
            long deltaTime = currentTime - lastTime;
            lastTime = currentTime;

        }
    }
    
    private boolean isMoving() {
        return mc.player.forwardSpeed != 0 || mc.player.sidewaysSpeed != 0;
    }
    
    private void resetTimer() {
        if (mc instanceof MinecraftClientAccessor) {
        }
    }
    
    @Override
    public void onDisable() {
        super.onDisable();
        resetTimer();
    }
}

