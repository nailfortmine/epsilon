package org.kurva.werlii.client.module.exploit;

import net.minecraft.item.Item;
import net.minecraft.item.Items;
import org.kurva.werlii.client.module.Module;
import org.kurva.werlii.client.setting.BooleanSetting;
import org.kurva.werlii.client.setting.NumberSetting;
import org.lwjgl.glfw.GLFW;

public class NoSlow extends Module {
    private final BooleanSetting itemsS;
    private final BooleanSetting webS;
    private final BooleanSetting soulSandS;
    private final BooleanSetting slimeS;
    private final BooleanSetting iceS;
    private final NumberSetting multiplierS;
    
    public NoSlow() {
        super("NoSlow", "Prevents slowdown from various sources", Category.EXPLOIT);
        this.setKeyCode(GLFW.GLFW_KEY_UNKNOWN);
        this.registerKeybinding("Werlii Exploit");
        
        itemsS = new BooleanSetting("Items", "Prevent slowdown from using items", this, true);
        webS = new BooleanSetting("Web", "Prevent slowdown from cobwebs", this, true);
        soulSandS = new BooleanSetting("Soul Sand", "Prevent slowdown from soul sand", this, true);
        slimeS = new BooleanSetting("Slime", "Prevent slowdown from slime blocks", this, true);
        iceS = new BooleanSetting("Ice", "Improve speed on ice", this, true);
        multiplierS = new NumberSetting("Multiplier", "Speed multiplier when slowed", this, 1.0, 0.1, 1.0, 0.05);
        
        addSetting(itemsS);
        addSetting(webS);
        addSetting(soulSandS);
        addSetting(slimeS);
        addSetting(iceS);
        addSetting(multiplierS);
    }
    
    @Override
    public void onTick() {
        if (mc.player == null) return;
        
        if (itemsS.getValue() && mc.player.isUsingItem()) {
            Item item = mc.player.getActiveItem().getItem();
            if (shouldPreventSlowdown(item)) {
                float multiplier = multiplierS.getValue().floatValue();
                
                if (mc.player.forwardSpeed != 0) {
                    mc.player.forwardSpeed /= 0.2F;
                    mc.player.forwardSpeed *= multiplier;
                }
                
                if (mc.player.sidewaysSpeed != 0) {
                    mc.player.sidewaysSpeed /= 0.2F;
                    mc.player.sidewaysSpeed *= multiplier;
                }
            }
        }
    }
    
    private boolean shouldPreventSlowdown(Item item) {
        return item == Items.BOW || 
               item == Items.CROSSBOW || 
               item == Items.TRIDENT || 
               item == Items.SHIELD;
    }
    
    public boolean preventWebSlowdown() {
        return isEnabled() && webS.getValue();
    }
    
    public boolean preventSoulSandSlowdown() {
        return isEnabled() && soulSandS.getValue();
    }
    
    public boolean preventSlimeSlowdown() {
        return isEnabled() && slimeS.getValue();
    }
    
    public boolean improveIceSpeed() {
        return isEnabled() && iceS.getValue();
    }
    
    public float getMultiplier() {
        return multiplierS.getValue().floatValue();
    }
}

