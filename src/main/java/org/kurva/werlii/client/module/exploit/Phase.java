package org.kurva.werlii.client.module.exploit;

import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.util.math.Vec3d;
import org.kurva.werlii.client.module.Module;
import org.kurva.werlii.client.setting.BooleanSetting;
import org.kurva.werlii.client.setting.ModeSetting;
import org.kurva.werlii.client.setting.NumberSetting;
import org.lwjgl.glfw.GLFW;

public class Phase extends Module {
    private final ModeSetting modeS;
    private final NumberSetting speedS;
    private final BooleanSetting bypassS;
    private final BooleanSetting noClipS;
    private final BooleanSetting autoDisableS;
    
    private boolean isPhasing = false;
    private Vec3d lastPos = null;
    
    public Phase() {
        super("Phase", "Allows you to glitch through blocks", Category.EXPLOIT);
        this.setKeyCode(GLFW.GLFW_KEY_UNKNOWN);
        this.registerKeybinding("Werlii Exploit");
        
        modeS = new ModeSetting("Mode", "Phasing method", this, "Vanilla", "Vanilla", "NCP", "Packet");
        speedS = new NumberSetting("Speed", "Phase movement speed", this, 0.2, 0.1, 1.0, 0.1);
        bypassS = new BooleanSetting("Bypass", "Use bypass techniques", this, true);
        noClipS = new BooleanSetting("NoClip", "Prevent block collisions", this, true);
        autoDisableS = new BooleanSetting("Auto Disable", "Disable after phasing", this, false);
        
        addSetting(modeS);
        addSetting(speedS);
        addSetting(bypassS);
        addSetting(noClipS);
        addSetting(autoDisableS);
    }
    
    @Override
    public void onEnable() {
        super.onEnable();
        isPhasing = false;
        lastPos = null;
        
        if (mc.player != null) {
            mc.player.noClip = noClipS.getValue();
        }
    }
    
    @Override
    public void onDisable() {
        super.onDisable();
        
        if (mc.player != null) {
            mc.player.noClip = false;
        }
    }
    
    @Override
    public void onTick() {
        if (mc.player == null || mc.world == null) return;
        
        if (hasSideMovement()) {
            switch (modeS.getValue()) {
                case "Vanilla":
                    handleVanillaPhase();
                    break;
                case "NCP":
                    handleNCPPhase();
                    break;
                case "Packet":
                    handlePacketPhase();
                    break;
            }
        }
        
        lastPos = mc.player.getPos();
    }
    
    private boolean hasSideMovement() {
        return mc.player.forwardSpeed != 0 || mc.player.sidewaysSpeed != 0;
    }
    
    private void handleVanillaPhase() {
        mc.player.noClip = true;
        
        Vec3d velocity = mc.player.getVelocity();
        double speed = speedS.getValue();
        
        if (mc.player.forwardSpeed != 0) {
            double forward = mc.player.forwardSpeed * speed;
            velocity = velocity.add(
                -Math.sin(Math.toRadians(mc.player.getYaw())) * forward,
                0,
                Math.cos(Math.toRadians(mc.player.getYaw())) * forward
            );
        }
        
        if (mc.player.sidewaysSpeed != 0) {
            double strafe = mc.player.sidewaysSpeed * speed;
            velocity = velocity.add(
                Math.cos(Math.toRadians(mc.player.getYaw())) * strafe,
                0,
                Math.sin(Math.toRadians(mc.player.getYaw())) * strafe
            );
        }
        
        mc.player.setVelocity(velocity);
    }
    
    private void handleNCPPhase() {
        if (!isPhasing) {
            mc.player.setPosition(
                mc.player.getX(),
                mc.player.getY() - 0.0001,
                mc.player.getZ()
            );
            isPhasing = true;
        }
        
        Vec3d velocity = mc.player.getVelocity();
        double speed = speedS.getValue() * 0.5;
        
        if (mc.player.forwardSpeed != 0) {
            double forward = mc.player.forwardSpeed * speed;
            velocity = velocity.add(
                -Math.sin(Math.toRadians(mc.player.getYaw())) * forward,
                0,
                Math.cos(Math.toRadians(mc.player.getYaw())) * forward
            );
        }
        
        if (mc.player.sidewaysSpeed != 0) {
            double strafe = mc.player.sidewaysSpeed * speed;
            velocity = velocity.add(
                Math.cos(Math.toRadians(mc.player.getYaw())) * strafe,
                0,
                Math.sin(Math.toRadians(mc.player.getYaw())) * strafe
            );
        }
        
        mc.player.setVelocity(velocity);
        
        if (bypassS.getValue()) {
            mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(
                mc.player.getX(),
                mc.player.getY() - 0.0001,
                mc.player.getZ(),
                false
            ));
        }
    }
    
    private void handlePacketPhase() {
        if (lastPos != null) {
            double speed = speedS.getValue();
            double forward = mc.player.forwardSpeed * speed;
            double strafe = mc.player.sidewaysSpeed * speed;
            
            double x = mc.player.getX();
            double y = mc.player.getY();
            double z = mc.player.getZ();
            
            if (forward != 0) {
                x -= Math.sin(Math.toRadians(mc.player.getYaw())) * forward;
                z += Math.cos(Math.toRadians(mc.player.getYaw())) * forward;
            }
            
            if (strafe != 0) {
                x += Math.cos(Math.toRadians(mc.player.getYaw())) * strafe;
                z += Math.sin(Math.toRadians(mc.player.getYaw())) * strafe;
            }
            
            mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(
                x, y, z, false
            ));
            
            if (bypassS.getValue()) {
                mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(
                    x, y - 0.0001, z, false
                ));
                mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(
                    x, y + 0.0001, z, false
                ));
            }
            
            mc.player.setPosition(x, y, z);
            
            if (autoDisableS.getValue() && isPhasing) {
                setEnabled(false);
            }
        }
        
        isPhasing = true;
    }
}

