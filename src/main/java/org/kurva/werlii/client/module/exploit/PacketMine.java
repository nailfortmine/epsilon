package org.kurva.werlii.client.module.exploit;

import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.text.Text;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import org.kurva.werlii.client.module.Module;
import org.kurva.werlii.client.setting.BooleanSetting;
import org.kurva.werlii.client.setting.NumberSetting;
import org.lwjgl.glfw.GLFW;

import java.util.ArrayList;
import java.util.List;

public class PacketMine extends Module {
    private BlockPos targetBlock = null;
    private Direction targetDirection = null;
    private int breakTicks = 0;
    private final List<BlockPos> queuedBlocks = new ArrayList<>();
    
    private final NumberSetting breakDelayS;
    private final BooleanSetting instantBreakS;
    private final BooleanSetting autoBreakS;
    private final BooleanSetting silentS;
    private final BooleanSetting bypassS;
    private final BooleanSetting rotateS;
    
    public PacketMine() {
        super("PacketMine", "Breaks blocks using packets for faster mining", Category.EXPLOIT);
        this.setKeyCode(GLFW.GLFW_KEY_B);
        this.registerKeybinding("Werlii Exploit");
        
        breakDelayS = new NumberSetting("Break Delay", "Delay between break attempts", this, 5.0, 0.0, 20.0, 1.0);
        instantBreakS = new BooleanSetting("Instant Break", "Try to break blocks instantly", this, false);
        autoBreakS = new BooleanSetting("Auto Break", "Automatically break blocks you look at", this, false);
        silentS = new BooleanSetting("Silent", "Don't show breaking animation", this, true);
        bypassS = new BooleanSetting("Bypass Mode", "Use techniques to bypass anti-cheat", this, false);
        rotateS = new BooleanSetting("Rotate", "Rotate to face blocks", this, false);
        
        addSetting(breakDelayS);
        addSetting(instantBreakS);
        addSetting(autoBreakS);
        addSetting(silentS);
        addSetting(bypassS);
        addSetting(rotateS);
        
    }
    
    @Override
    public void onEnable() {
        super.onEnable();
        
        if (mc != null && mc.player != null && !mc.isInSingleplayer()) {
            mc.player.sendMessage(Text.literal("§8[§bWerlii§8] §cWarning: PacketMine may cause server kicks or bans."), false);
        }
        
        targetBlock = null;
        targetDirection = null;
        breakTicks = 0;
        queuedBlocks.clear();
    }
    
    @Override
    public void onTick() {
        if (mc.player == null || mc.world == null) return;
        
        if (autoBreakS.getValue() && mc.crosshairTarget instanceof net.minecraft.util.hit.BlockHitResult) {
            net.minecraft.util.hit.BlockHitResult hitResult = (net.minecraft.util.hit.BlockHitResult) mc.crosshairTarget;
            BlockPos pos = hitResult.getBlockPos();
            
            if (isValidBlock(pos) && !queuedBlocks.contains(pos)) {
                queuedBlocks.add(pos);
            }
        }
        
        if (!queuedBlocks.isEmpty() && (targetBlock == null || breakTicks <= 0)) {
            targetBlock = queuedBlocks.remove(0);
            targetDirection = Direction.UP;
            breakTicks = breakDelayS.getValue().intValue();
            
            startBreaking(targetBlock, targetDirection);
        }
        
        if (targetBlock != null) {
            if (breakTicks <= 0) {
                finishBreaking(targetBlock, targetDirection);
                
                targetBlock = null;
                targetDirection = null;
            } else {
                breakTicks--;
            }
        }
    }
    
    private boolean isValidBlock(BlockPos pos) {
        BlockState state = mc.world.getBlockState(pos);
        return !state.isAir() && state.getBlock().getHardness() > 0;
    }
    
    private void startBreaking(BlockPos pos, Direction direction) {
        PlayerActionC2SPacket packet = new PlayerActionC2SPacket(
            PlayerActionC2SPacket.Action.START_DESTROY_BLOCK,
            pos,
            direction
        );
        
        mc.getNetworkHandler().sendPacket(packet);
        
        if (!silentS.getValue()) {
            mc.interactionManager.updateBlockBreakingProgress(pos, direction);
        }
    }
    
    private void finishBreaking(BlockPos pos, Direction direction) {
        PlayerActionC2SPacket packet = new PlayerActionC2SPacket(
            PlayerActionC2SPacket.Action.STOP_DESTROY_BLOCK,
            pos,
            direction
        );
        
        mc.getNetworkHandler().sendPacket(packet);
        
        if (bypassS.getValue()) {
            PlayerActionC2SPacket abortPacket = new PlayerActionC2SPacket(
                PlayerActionC2SPacket.Action.ABORT_DESTROY_BLOCK,
                pos,
                direction
            );
            mc.getNetworkHandler().sendPacket(abortPacket);
            
            PlayerActionC2SPacket startPacket = new PlayerActionC2SPacket(
                PlayerActionC2SPacket.Action.START_DESTROY_BLOCK,
                pos,
                direction
            );
            mc.getNetworkHandler().sendPacket(startPacket);
        }
    }
}

